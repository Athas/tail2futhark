let v0:Sh(2) = [10,30] in
let v2:[double]2 = reshape{[double],[1,2]}(v0,snoc{[double],[0]}(each{[int,double],[1]}(i2d,iotaSh(49)),3.00)) in
let v4:[double]2 = transp{[double],[2]}(snoc{[double],[1]}(v2,each{[int,double],[1]}(i2d,iotaSh(10)))) in
let v5:Sh(3) = catSh(dropSh(1,shape{[double],[2]}(v4)),shape{[double],[2]}(v2)) in
let v6:[int]0 = subi(firstSh(shapeSh(shape{[double],[2]}(v2))),1) in
let v7:Sh(3) = iotaSh(firstSh(shapeSh(v5))) in
let v8:Sh(3) = catSh(rotateSh(v6,dropSh(~1,v7)),takeSh(~1,v7)) in
let v9:[double]3 = transp2{[double],[3]}(v8,reshape{[double],[2,3]}(v5,v2)) in
let v10:Sh(3) = catSh(dropSh(~1,shape{[double],[2]}(v2)),shape{[double],[2]}(v4)) in
let v11:Si(2) = firstSh(shapeSh(shape{[double],[2]}(v2))) in
let v12:Sh(3) = iotaSh(firstSh(shapeSh(v10))) in
let v13:Sh(1) = dropSh(negi(v11),rotateSh(v11,iotaSh(firstSh(shapeSh(v12))))) in
let v14:Sh(3) = catSh(dropSh(~1,iotaSh(v11)),snocSh(v13,v11)) in
let v15:[double]3 = transp2{[double],[3]}(v14,reshape{[double],[2,3]}(v10,v4)) in
let v20:[double]2 = reduce{[double],[2]}(addd,0.00,zipWith{[double,double,double],[3]}(muld,v9,v15)) in
reduce{[double],[0]}(subd,0.00,reduce{[double],[1]}(addd,0.00,v20))
