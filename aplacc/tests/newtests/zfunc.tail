let v0:<int>100 = iotaV(100) in
let v2:<int>100 = eachV{[int,int],[100]}(fn v1:[int]0 => addi(100,v1),iotaV(100)) in
let v3:<int>100 = v0 in
let v4:<int>100 = v2 in
let v7:[int]0 = maxi(b2iV(tt),reduce{[int],[0]}(addi,0,transp{[int],[1]}(v3))) in
let v10:[int]0 = maxi(b2iV(tt),reduce{[int],[0]}(addi,0,transp{[int],[1]}(v4))) in
let v11:[int]1 = reshape{[int],[1,1]}(shapeV{[int],[100]}(v3),[v7]) in
let v12:[int]1 = reshape{[int],[1,1]}(shapeV{[int],[100]}(v4),[v10]) in
let v17:[double]1 = zipWith{[double,double,double],[1]}(divd,eachV{[int,double],[100]}(i2d,v3),each{[int,double],[1]}(i2d,v11)) in
let v22:[double]1 = zipWith{[double,double,double],[1]}(divd,eachV{[int,double],[100]}(i2d,v4),each{[int,double],[1]}(i2d,v12)) in
let v31:[double]1 = zipWith{[double,double,double],[1]}(divd,each{[int,double],[1]}(i2d,zipWith{[int,int,int],[1]}(addi,v3,v4)),each{[int,double],[1]}(i2d,zipWith{[int,int,int],[1]}(addi,v11,v12))) in
let v34:[double]1 = zipWith{[double,double,double],[1]}(subd,v17,v22) in
let v44:[double]1 = zipWith{[double,double,double],[1]}(muld,v31,zipWith{[double,double,double],[1]}(muld,each{[double,double],[1]}(fn v39:[double]0 => subd(i2d(b2iV(tt)),v39),v31),zipWith{[double,double,double],[1]}(addd,each{[int,double],[1]}(fn v36:[int]0 => divd(1.00,i2d(v36)),v11),each{[int,double],[1]}(fn v35:[int]0 => divd(1.00,i2d(v35)),v12)))) in
let v46:[double]1 = each{[double,double],[1]}(fn v45:[double]0 => powd(v45,0.50),v44) in
let v47:[double]1 = rav(v46) in
let v53:[double]1 = zipWith{[double,double,double],[1]}(addd,v47,each{[int,double],[1]}(i2d,each{[bool,int],[1]}(b2i,each{[double,bool],[1]}(fn v48:[double]0 => eqd(v48,i2d(b2iV(ff))),v47)))) in
let v54:[double]1 = reshape{[double],[1,1]}(shape{[double],[1]}(v46),v53) in
let v57:[double]1 = zipWith{[double,double,double],[1]}(divd,v34,v54) in
let v60:[int]1 = each{[double,int],[1]}(ceil,each{[double,double],[1]}(fn v58:[double]0 => muld(i2d(100),v58),v57)) in
let v61:[int]1 = prArrI(v60) in
i2d(b2iV(ff))
